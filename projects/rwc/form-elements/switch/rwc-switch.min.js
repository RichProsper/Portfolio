class RWC_Switch extends HTMLElement{static formAssociated=!0;static get observedAttributes(){return["value","required","switch_size","switch_color"]}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get checked(){return this.Input.checked}set checked(t){this.Input.checked=t,t?this.Base.classList.add("checked"):this.Base.classList.remove("checked")}get form(){return this.internals_.form}get name(){return this.getAttribute("name")}get type(){return this.localName}get validity(){return this.internals_.validity}get validationMessage(){return this.internals_.validationMessage}get willValidate(){return this.internals_.willValidate}checkValidity(){return this.internals_.checkValidity()}reportValidity(){return this.internals_.reportValidity()}setFormValue=()=>this.checked?this.internals_.setFormValue(this.getAttribute("value")):this.internals_.setFormValue(null);formDisabledCallback(t){this.Switch.className=t?"switch disabled":"switch",this.Input.disabled=t}formResetCallback(){this.Input.checked=this.hasAttribute("checked"),this.hasAttribute("checked")?this.Base.classList.add("checked"):this.Base.classList.remove("checked"),this.setFormValue(),this.validation()}constructor(){super(),this.internals_=this.attachInternals(),this.init()}init(){this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(this.getTemplate().content.cloneNode(!0)),this.Switch=this.shadowRoot.querySelector("label.switch"),this.Style=this.shadowRoot.querySelector("style"),this.Input=this.shadowRoot.querySelector("input"),this.Base=this.shadowRoot.querySelector("span.base")}getTemplate(){this.defaultSwitchSize="2.2rem",this.defaultSwitchColor="207, 90%, 77%",this.defaultValue="on",this.css="";const t=document.createElement("template");return t.innerHTML='\n            <link rel="stylesheet" href="style.min.css">\n            <style></style>\n\n            <label class="switch">\n                <span class="wrapper">\n                    <span class="base">\n                        <input type="checkbox">\n                        <span class="thumb"></span>\n                    </span>\n                    <span class="track"></span>\n                </span>\n                <slot name="label" class="label"></slot>\n            </label>\n        ',t}validation(){!this.hasAttribute("required")||this.checked?this.internals_.setValidity({}):this.internals_.setValidity({valueMissing:!0},"Please switch this on if you want to proceed",this.Input)}namedColorToRGBColor(){if(!this.hasAttribute("switch_color"))return!1;const t=document.createElement("div");t.style.color=this.getAttribute("switch_color"),document.body.appendChild(t);const e=window.getComputedStyle(t).getPropertyValue("color").replace(/[rgba()]/g,"").split(", ");document.body.removeChild(t);const s=+e[0]/255,i=+e[1]/255,a=+e[2]/255,h=Math.min(s,i,a),l=Math.max(s,i,a),r=l-h;let c=0,n=0,o=0;return 0===r?c=0:l===s?c=(i-a)/r%6:l===i?c=(a-s)/r+2:l===a&&(c=(s-i)/r+4),c=Math.round(60*c),c<0&&(c+=360),o=(l+h)/2,n=0===r?0:r/(1-Math.abs(2*o-1)),n=+(100*n).toFixed(1),o=+(100*o).toFixed(1),4===e.length?[`hsla(${c}, ${n}%, ${o}%, ${e[3]})`,`hsla(${c}, ${n}%, ${o}%, .1)`]:[`hsl(${c}, ${n}%, ${o}%)`,`hsla(${c}, ${n}%, ${o}%, .1)`]}updateSizeColor(){const t=this.namedColorToRGBColor();let e=this.css.replace("[[switch_size]]",this.getAttribute("switch_size")||this.defaultSwitchSize);t?(e=e.replace("[[switch_color]]",t[0]),e=e.replace("[[hover]]",t[1])):(e=e.replace("[[switch_color]]","hsl("+this.defaultSwitchColor+")"),e=e.replace("[[hover]]","hsl("+this.defaultSwitchColor+", .1)")),this.Style.innerHTML=e}connectedCallback(){this.Input.checked=this.hasAttribute("checked"),this.hasAttribute("checked")?this.Base.classList.add("checked"):this.Base.classList.remove("checked"),this.getAttribute("value")||this.setAttribute("value",this.defaultValue),this.updateSizeColor(),this.setFormValue(),this.validation(),this.Input.addEventListener("focus",(()=>this.Base.classList.add("focus"))),this.Input.addEventListener("blur",(()=>this.Base.classList.remove("focus"))),this.Input.addEventListener("change",(t=>{t.target.checked?this.Base.classList.add("checked"):this.Base.classList.remove("checked"),this.setFormValue(),this.validation()}))}attributeChangedCallback(t,e,s){switch(t){case"value":this.getAttribute("value")||this.setAttribute("value",this.defaultValue);break;case"required":this.hasAttribute("required")?this.Input.setAttribute("required",""):this.Input.removeAttribute("required");break;case"switch_size":case"switch_color":this.updateSizeColor();break;default:}this.validation()}}window.customElements.define("rwc-switch",RWC_Switch);